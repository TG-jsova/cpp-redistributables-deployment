---
- name: Gather Windows Credentials
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Set user creds from environment variables
      ansible.builtin.set_fact:
        windows_username: "{{ lookup('env', 'WINDOWS_USERNAME') }}"
        windows_password: "{{ lookup('env', 'WINDOWS_PASSWORD') }}"
        vcenter_hostname: "{{ lookup('env', 'VCENTER_HOSTNAME') }}"

- name: Retrieve vCenter Inventory and Create Host Group
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Log in to vCenter
      community.vmware.vmware_vm_info:
        hostname: "{{ hostvars['localhost']['vcenter_hostname'] }}"
        username: "{{ hostvars['localhost']['windows_username'] }}"
        password: "{{ hostvars['localhost']['windows_password'] }}"
        validate_certs: false
      register: vcenter_inventory

    - name: Filter powered-on Windows Server VMs
      ansible.builtin.set_fact:
        windows_vms: >-
          {{
            vcenter_inventory.virtual_machines
            | selectattr('guest_fullname', 'search', 'Windows')
            | selectattr('power_state', 'equalto', 'poweredOn')
            | rejectattr('guest_name', 'search', '^TTVDI')
            | map(attribute='ip_address')
            | select('defined')
            | list
          }}

    - name: Add Windows VMs to in-memory inventory
      ansible.builtin.add_host:
        name: "{{ item }}"
        groups: windows_vms
      loop: "{{ windows_vms }}"

- name: Install C++ Redistributables on Windows VMs
  hosts: windows_vms
  gather_facts: false
  vars:
    ansible_user: "{{ hostvars['localhost']['windows_username'] }}"
    ansible_password: "{{ hostvars['localhost']['windows_password'] }}"
    ansible_connection: psrp
    ansible_psrp_auth: ntlm
    ansible_psrp_cert_validation: ignore
  tasks:
    - name: Wait for system to become reachable over WinRM
      ansible.builtin.wait_for_connection:
        delay: 6
        timeout: 300
        sleep: 10

    - name: Apply gratuitous ARP fix to the system registry
      ansible.windows.win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
        name: ArpRetryCount
        data: 0
        type: dword
        state: present

    - name: Check if x86 Redistributable is installed
      ansible.windows.win_shell: |
        Get-WMIObject -Class Win32_Product | Where-Object Name -like "Microsoft Visual C++ 2022 X86 Additional Runtime*" | Select-Object -ExpandProperty Version
      register: x86_version_check
      changed_when: false

    - name: Check if x64 Redistributable is installed
      ansible.windows.win_shell: |
        Get-WMIObject -Class Win32_Product | Where-Object Name -like "Microsoft Visual C++ 2022 X64 Additional Runtime*" | Select-Object -ExpandProperty Version
      register: x64_version_check
      changed_when: false

    - name: Check if VMware Tools is installed
      ansible.windows.win_shell: |
        Get-WMIObject -Class Win32_Product | Where-Object Name -Like "VMware*" | Select-Object -ExpandProperty Version
      register: vmware_tools_version_check
      changed_when: false

    - name: Set flag if any package needs installation
      ansible.builtin.set_fact:
        needs_installation: >-
          {{
            x86_version_check.stdout.strip() != "14.40.33816" or
            x64_version_check.stdout.strip() != "14.40.33816" or
            vmware_tools_version_check.stdout.strip() != "12.5.1.24649672"
          }}

    - name: Pre-installation reboot
      ansible.windows.win_reboot:
        reboot_timeout: 600
        msg: "Rebooting before starting update"
      when: needs_installation
      register: reboot_result

    - name: Wait for system to become reachable over WinRM
      ansible.builtin.wait_for_connection:
        delay: 6
        timeout: 300
        sleep: 10
      when: needs_installation

    - name: Ensure Temp directory exists
      ansible.windows.win_file:
        path: C:\Temp
        state: directory
      when: needs_installation

    - name: Download x86 Redistributable if not installed
      ansible.windows.win_get_url:
        url: https://aka.ms/vs/16/release/vc_redist.x86.exe
        dest: C:\Temp\vc_redist.x86.exe
      when: needs_installation and x86_version_check.stdout.strip() != "14.40.33816"
      register: download_x86
      retries: 3
      delay: 5

    - name: Download x64 Redistributable if not installed
      ansible.windows.win_get_url:
        url: https://aka.ms/vs/16/release/vc_redist.x64.exe
        dest: C:\Temp\vc_redist.x64.exe
      when: needs_installation and x64_version_check.stdout.strip() != "14.40.33816"
      register: download_x64
      retries: 3
      delay: 5

    - name: Attempt x86 Redistributable installation
      ansible.windows.win_package:
        path: C:\Temp\vc_redist.x86.exe
        arguments: /install /quiet /norestart
        state: present
      when: needs_installation and download_x86 is changed
      register: install_x86
      failed_when: false

    - name: Reboot if x86 Redistributable installation fails
      ansible.windows.win_reboot:
        reboot_timeout: 600
        msg: "Rebooting due to x86 Redistributable installation failure."
      when: needs_installation and install_x86 is failed

    - name: Retry x86 Redistributable installation after reboot
      ansible.windows.win_package:
        path: C:\Temp\vc_redist.x86.exe
        arguments: /install /quiet /norestart
        state: present
      when: needs_installation and install_x86 is failed
      failed_when: false

    - name: Attempt x64 Redistributable installation
      ansible.windows.win_package:
        path: C:\Temp\vc_redist.x64.exe
        arguments: /install /quiet /norestart
        state: present
      when: needs_installation and download_x64 is changed
      register: install_x64
      failed_when: false

    - name: Reboot if x64 Redistributable installation fails
      ansible.windows.win_reboot:
        reboot_timeout: 600
        msg: "Rebooting due to x64 Redistributable installation failure."
      when: needs_installation and install_x64 is failed

    - name: Retry x64 Redistributable installation after reboot
      ansible.windows.win_package:
        path: C:\Temp\vc_redist.x64.exe
        arguments: /install /quiet /norestart
        state: present
      when: needs_installation and install_x64 is failed
      failed_when: false

    - name: Check if reboot is required
      ansible.windows.win_reboot:
        reboot_timeout: 600
        msg: "Rebooting after installing C++ Redistributables."
      when: needs_installation and download_x64 is changed
      register: reboot_result

    - name: Wait for system to become reachable over WinRM
      ansible.builtin.wait_for_connection:
        delay: 6
        timeout: 300
        sleep: 10
      when: needs_installation

    - name: Download VMware Tools 12.5.1 installer if not installed or outdated
      ansible.windows.win_get_url:
        url: https://packages.vmware.com/tools/releases/latest/windows/x64/VMware-tools-12.5.1-24649672-x64.exe
        dest: C:\Temp\VMware-tools-12.5.1-24649672-x64.exe
      when: needs_installation and vmware_tools_version_check.stdout.strip() != "12.5.1.24649672"
      register: download_vmware_tools
      retries: 3
      delay: 5

    - name: Attempt VMware Tools installation
      ansible.windows.win_package:
        path: C:\Temp\VMware-tools-12.5.1-24649672-x64.exe
        arguments: /S /v"/qn REBOOT=ReallySuppress"
        state: present
      when: needs_installation and download_vmware_tools is changed
      register: install_vmware_tools
      failed_when: false

    - name: Reboot if VMware Tools installation fails
      ansible.windows.win_reboot:
        reboot_timeout: 600
        msg: "Rebooting due to VMware Tools installation failure."
      when: needs_installation and install_vmware_tools is failed

    - name: Retry VMware Tools installation after reboot
      ansible.windows.win_package:
        path: C:\Temp\VMware-tools-12.5.1-24649672-x64.exe
        arguments: /S /v"/qn REBOOT=ReallySuppress"
        state: present
      when: needs_installation and install_vmware_tools is failed
      failed_when: false

    - name: Check if reboot is required after VMware Tools installation
      ansible.windows.win_reboot:
        reboot_timeout: 600
        msg: "Rebooting after installing VMware Tools 12.5.1."
      when: needs_installation and download_vmware_tools is changed

    - name: Wait for system to become reachable over WinRM
      ansible.builtin.wait_for_connection:
        delay: 6
        timeout: 300
        sleep: 10
      when: needs_installation

    - name: Clean up installer files
      ansible.windows.win_file:
        path: "{{ item }}"
        state: absent
      loop:
        - C:\Temp\vc_redist.x86.exe
        - C:\Temp\vc_redist.x64.exe
        - C:\Temp\VMware-tools-12.5.1-24649672-x64.exe
      when: needs_installation
      register: cleanup_result
